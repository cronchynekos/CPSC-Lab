script.sh

#!/bin/bash

#Author Nathanael kim
#Program: Quadratic Formula


rm *.o
rm *.out

echo "~Assemble Control.asm"
nasm -f elf64 -l control.lis -o control.o control.asm

echo "~Assemble Fill.asm"
nasm -f elf64 -l fill.lis -o fill.o fill.asm

echo "~Assemble Sum.asm"
nasm -f elf64 -l sum.lis -o sum.o sum.asm

echo "~Compile Main.c"
gcc -c -Wall -m64 -no-pie -o main.o main.c -std=c11

echo "~Compile Display.cpp"
g++ -c -Wall -m64 -fno-pie -no-pie -o display.o display.cpp -std=c++17

echo "~Link the object files using the gcc linker standard 2017"
gcc -m64 -no-pie -o final.out -std=c++17 control.o fill.o sum.o main.o display.o

echo "~Run the program Sum of an Array"
./final.out

echo "~Have a very nice evening"













main.c

/*
;********************************************************************************************
; Program name:          Sum of an Array Calculator                                         *
; Programming Language:  x86 Assembly                                                       *
; Program Description:   This program adds all the inputs from a user and outputs the sum   *
;                                                                                           *
;********************************************************************************************
; Author Information:                                                                       *
; Name:         Nathanael Kim                                                               *
; Email:        nathan.kim@csu.fullerton.edu                                                *
; Institution:  California State University - Fullerton                                     *
; Course:       CPSC 240-05 Assembly Language                                               *
;                                                                                           *
;********************************************************************************************
; Copyright (C) 2021 Nathanael Kim                                                          *
; This program is free software: you can redistribute it and/or modify it under the terms   *
; of the GNU General Public License version 3 as published by the Free Software Foundation. *
; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
; See the GNU General Public License for more details. A copy of the GNU General Public     *
; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
;                                                                                           *
;********************************************************************************************
; Program information                                                                       *
;   Program name: Sum of an Array Calculator                                                *
;   Programming languages: One module in C, Four modules in X86, One modules in c++         *
;   Files in this program: control.asm fill.asm sum.asm main.c display.cpp                  *
;                                                                                           *
;********************************************************************************************
; This File                                                                                 *
;    Name:      main.c                                                                      *
;    Purpose:   To call the control.asm file and take the sum                               *
;                                                                                           *
;********************************************************************************************
*/
#include <stdio.h>
#include <stdint.h>

extern double _control();
extern double _fill();
extern double _sum();

int main(int argc, char* argv[]){
double answer = 0.0;
	printf("======================================================\n");//opening prompt
	printf("Welcome to Sum of an Array Calculator by Nathanael Kim\n");

	answer = _control();//calls to asm file

	printf("The Main received %5.8lf and decided to keep it.\n", answer);//ending prompt
  printf("Thank you for using High Speed Array Software.\n");
  printf("For system support contact Nathanael Kim at nathan.kim@csu.fullerton.edu.\n");
	printf("Main will return 0 to the operating system.\n");
	return 0;
}




















display.cpp

/*
;********************************************************************************************
; Program name:          Sum of an Array Calculator                                         *
; Programming Language:  x86 Assembly                                                       *
; Program Description:   This program adds all the inputs from a user and outputs the sum   *
;                                                                                           *
;********************************************************************************************
; Author Information:                                                                       *
; Name:         Nathanael Kim                                                               *
; Email:        nathan.kim@csu.fullerton.edu                                                *
; Institution:  California State University - Fullerton                                     *
; Course:       CPSC 240-05 Assembly Language                                               *
;                                                                                           *
;********************************************************************************************
; Copyright (C) 2021 Nathanael Kim                                                          *
; This program is free software: you can redistribute it and/or modify it under the terms   *
; of the GNU General Public License version 3 as published by the Free Software Foundation. *
; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
; See the GNU General Public License for more details. A copy of the GNU General Public     *
; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
;                                                                                           *
;********************************************************************************************
; Program information                                                                       *
;   Program name: Sum of an Array Calculator                                                *
;   Programming languages: One module in C, Four modules in X86, One modules in c++         *
;   Files in this program: control.asm fill.asm sum.asm main.c display.cpp                  *
;                                                                                           *
;********************************************************************************************
; This File                                                                                 *
;    Name:      display.cpp                                                                 *
;    Purpose:   To print out all the integers in the array                                  *
;                                                                                           *
;********************************************************************************************
*/
#include <stdio.h>

extern "C" void display_array(double array[], long index);

void display_array(double array[], long index)
{
    for (long i = 0; i < index; ++i)//loops until every input gets printed
    {
        printf("%1.8f", array[i]);
        printf("%s", " ");
        printf("\n");
    }
}


















control.asm


;********************************************************************************************
; Program name:          Sum of an Array Calculator                                         *
; Programming Language:  x86 Assembly                                                       *
; Program Description:   This program adds all the inputs from a user and outputs the sum   *
;                                                                                           *
;********************************************************************************************
; Author Information:                                                                       *
; Name:         Nathanael Kim                                                               *
; Email:        nathan.kim@csu.fullerton.edu                                                *
; Institution:  California State University - Fullerton                                     *
; Course:       CPSC 240-05 Assembly Language                                               *
;                                                                                           *
;********************************************************************************************
; Copyright (C) 2021 Nathanael Kim                                                          *
; This program is free software: you can redistribute it and/or modify it under the terms   *
; of the GNU General Public License version 3 as published by the Free Software Foundation. *
; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
; See the GNU General Public License for more details. A copy of the GNU General Public     *
; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
;                                                                                           *
;********************************************************************************************
; Program information                                                                       *
;   Program name: Sum of an Array Calculator                                                *
;   Programming languages: One module in C, Four modules in X86, One modules in c++         *
;   Files in this program: control.asm fill.asm sum.asm main.c display.cpp                  *
;                                                                                           *
;********************************************************************************************
; This File                                                                                 *
;    Name:      control.asm                                                                 *
;    Purpose:   Outputs prompts, calls functions, and sends sum back to main                *
;                                                                                           *
;********************************************************************************************

extern printf
extern scanf
extern _fill
extern display_array
extern _sum

array_size equ 100                  ; Capacity limit for number of elements allowed in array.

global _control                 ; Makes function callable from other linked files.

section .data
    welcome db "Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Nathanael Kim", 10, 0
    numsreceived db 10, "These numbers were received and placed into the array:", 10, 0
    stringNumFormat db "The sum of the numbers in this array is %1.8lf.", 10, 0
    sumprompt db 10, "The sum will now be returned to the main function.", 10, 0
    stringFormat db "%s", 0

section .bss
    intArray: resq 100                  ; Uninitialized array with 100 reserved qwords.

section .text

_control:

; Back up all registers and set stack pointer to base pointer
push rbp
mov rbp, rsp
push rdi
push rsi
push rdx
push rcx
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
push rbx
pushf

push qword -1                           ; Extra push to create even number of pushes

;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
mov qword r14, 0                        ; Reserve register for number of elements in array.
mov qword r13, 0                        ; Reserve register for Sum of integers in array

;-------------------------------OPENING PROMPT------------------------------------------

;Display welcome message
mov qword rax, 0
mov qword rdi, welcome ;displays "Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Nathanael Kim"
call printf

mov qword rdi, intArray                 ; Passes array into rdi register.
mov qword rsi, array_size               ; Passes the max array size into rsi register.
mov qword rax, 0
call _fill                              ; Calls funtion input_array.
mov r14, rax                            ; Saves copy of input_array output into r14.


mov qword rdi, stringFormat
mov qword rsi, numsreceived ;displays "These numbers were received and placed into the array:"
mov qword rax, 0
call printf                             ; Prints out received confirmation

;----------------------------DISPLAY SUM OF ARRAY--------------------------------------
; Calls display_array that prints out each integer in the array seperated by 1 space.

push qword 0
mov qword rdi, intArray                 ; Passes the array as first parameter.
mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
mov qword rax, 0
call display_array                      ; Calls display_array function.
pop qword rax


mov rdi, intArray                 ; Passes the array as first parameter.
mov rsi, r14                      ; Passes # of elements in the array stored in r14.
mov rax, 0
call _sum                                ; Function _sum to add all the integers in array.



push qword 0
mov rax, 1
mov rdi, stringNumFormat ;displays "The sum of the numbers in this array is %1.8lf."
call printf
pop rax


mov qword rax, 0
mov qword rdi, sumprompt ;displays "The sum will now be returned to the main function."
call printf


;---------------------------------END OF FILE-----------------------------------------------

;Restores all registers to their original state.
pop rax                                 ; Remove extra push of -1 from stack.
movsd xmm0, xmm14

popf
pop rbx
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rcx
pop rdx
pop rsi
pop rdi
pop rbp

ret




























fill.asm



;********************************************************************************************
; Program name:          Sum of an Array Calculator                                         *
; Programming Language:  x86 Assembly                                                       *
; Program Description:   This program adds all the inputs from a user and outputs the sum   *
;                                                                                           *
;********************************************************************************************
; Author Information:                                                                       *
; Name:         Nathanael Kim                                                               *
; Email:        nathan.kim@csu.fullerton.edu                                                *
; Institution:  California State University - Fullerton                                     *
; Course:       CPSC 240-05 Assembly Language                                               *
;                                                                                           *
;********************************************************************************************
; Copyright (C) 2021 Nathanael Kim                                                          *
; This program is free software: you can redistribute it and/or modify it under the terms   *
; of the GNU General Public License version 3 as published by the Free Software Foundation. *
; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
; See the GNU General Public License for more details. A copy of the GNU General Public     *
; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
;                                                                                           *
;********************************************************************************************
; Program information                                                                       *
;   Program name: Sum of an Array Calculator                                                *
;   Programming languages: One module in C, Four modules in X86, One modules in c++         *
;   Files in this program: control.asm fill.asm sum.asm main.c display.cpp                  *
;                                                                                           *
;********************************************************************************************
; This File                                                                                 *
;    Name:      fill.asm                                                                    *
;    Purpose:   To prompt the user for input and fill an array with the input               *
;                                                                                           *
;********************************************************************************************

extern printf
extern scanf
extern atof

global _fill                ; Makes function callable from other linked files.

section .data
    instructionOnePrompt db "Please enter floating point numbers separated by ws.",10,
                         db "When finished press enter followed by cntl+D.",10,0
    stringFormat db "%s", 0

section .bss

section .text

_fill:

; Back up all registers and set stack pointer to base pointer
push rbp
mov rbp, rsp
push rdi
push rsi
push rdx
push rcx
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
push rbx

push qword -1                           ; Extra push to create even number of pushes

;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
mov qword r15, rdi                      ; Address of array saved to r15.
mov qword r14, rsi                      ; Max number of elements allowed in array.
mov qword r13, 0                        ; Set counter to 0 elements in Array.


;Display instructionOnePrompt message
  mov qword rax, 0
  mov qword rdi, instructionOnePrompt ;"Please enter floating point numbers separated by ws."
  call printf






;---------------------------------START OF LOOP---------------------------------------------
begin_loop:

; Scanf function called to take user input.
mov qword rdi, stringFormat
push qword 0
mov qword rsi, rsp                      ; Stack pointer points to where scanf outputs.
mov qword rax, 0
call scanf

; Tests if Control + D is entered to finish inputing into array.
cdqe
cmp rax, -1
je end_of_loop                          ; If control + D is entered, jump to end_of_loop.


;---------------------------------ASCII TO LONG---------------------------------------------
; Converts string of characters (user input) into a long integer.

mov qword rax, 0
mov qword rdi, rsp
call atof
;movsd qword xmm13, xmm0                     ; Saves output long integer from atof in r12.
pop r8                                  ; Pop off stack into any scratch register.

;--------------------------------COPY INTO ARRAY--------------------------------------------
; Adds copy of long integer saved in r12 into array at index of counter (r13).
movsd xmm13, xmm0
movsd [r15 + 8 * r13], xmm13             ; Copies user input into array at index of r13.
inc r13                                 ; Increments counter r13 by 1.

;-----------------------------ARRAY CAPACITY TEST-------------------------------------------
; Tests to see if max array capacity has been reached.
cmp r13, r14                            ; Compares # of elements (r13) to capacity (r14).
je exit                                 ; If # of elements equals capacity, exit loop.

; Restarts loop.
jmp begin_loop


;---------------------------------END OF LOOP-----------------------------------------------

; After control+D is entered the loop is skipped and so is the pop in the loop
; therefore this controlD block makes up for that missed pop.
end_of_loop:
pop r8                                  ; Pop off stack into any scratch register.

;------------------------------------EXIT---------------------------------------------------
exit:

; Restore all backed up registers to their original state.
pop rax                                 ; Remove extra push of -1 from stack.
mov qword rax, r13                      ; Copies # of elements in r13 to rax.
pop rbx
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rcx
pop rdx
pop rsi
pop rdi
pop rbp

ret


























sum.asm


;********************************************************************************************
; Program name:          Sum of an Array Calculator                                         *
; Programming Language:  x86 Assembly                                                       *
; Program Description:   This program adds all the inputs from a user and outputs the sum   *
;                                                                                           *
;********************************************************************************************
; Author Information:                                                                       *
; Name:         Nathanael Kim                                                               *
; Email:        nathan.kim@csu.fullerton.edu                                                *
; Institution:  California State University - Fullerton                                     *
; Course:       CPSC 240-05 Assembly Language                                               *
;                                                                                           *
;********************************************************************************************
; Copyright (C) 2021 Nathanael Kim                                                          *
; This program is free software: you can redistribute it and/or modify it under the terms   *
; of the GNU General Public License version 3 as published by the Free Software Foundation. *
; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
; See the GNU General Public License for more details. A copy of the GNU General Public     *
; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
;                                                                                           *
;********************************************************************************************
; Program information                                                                       *
;   Program name: Sum of an Array Calculator                                                *
;   Programming languages: One module in C, Four modules in X86, One modules in c++         *
;   Files in this program: control.asm fill.asm sum.asm main.c display.cpp                  *
;                                                                                           *
;********************************************************************************************
; This File                                                                                 *
;    Name:      sum.asm                                                                     *
;    Purpose:   To add every number in the array and output the sum                         *
;                                                                                           *
;********************************************************************************************
extern printf
extern scanf
global _sum                             ; Makes function callable from other linked files.

section .data



section .bss

section .text

_sum:

extern printf
extern scanf
global _sum                             ; Makes function callable from other linked files.

section .data
          welcome db "Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Nathanael Kim", 10, 0


section .bss

section .text

_sum:

; Back up all registers to stack and set stack pointer to base pointer
push rbp
mov rbp, rsp
push rdi
push rsi
push rdx
push rcx
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
push rbx
pushf

push qword 0                           ; Extra push onto stack to make even # of pushes.

mov r15, rdi                            ; Copies array that was passed to r15.
mov r14, rsi                            ; Copies number of elements in the array to r14.
mov r13, 0                              ; Sum register to add elements of array to.
cvtsi2sd xmm14, r13
mov r12, 0                              ; Counter to to iterate through array.

;-----------------------------------START LOOP----------------------------------------------
begin_loop:

; Compares the counter (r12) to the number of elements in the array (r14).
cmp r12, r14
jge outofloop

;--------------------------------COPY INTO ARRAY--------------------------------------------
; Adds element of array at index of r12 to the Sum of register r13.

addsd xmm14, [r15 + 8 * r12] ;adds every input and stores the sum in xmm14
inc r12                                 ; Increments counter r12 by 1.



; Restarts loop
jmp begin_loop

;----------------------------------END OF LOOP----------------------------------------------
outofloop:

; Restores all backed up registers to their original state.
pop rax                                ; Remove extra push of -1 from stack.


movsd xmm0, xmm14

popf
pop rbx
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rcx
pop rdx
pop rsi
pop rdi
pop rbp

ret
